<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.tarena.ht.mapper.UserMapper">

<sql id="usersql">
SELECT * FROM
(SELECT * FROM
user_p u
	LEFT JOIN
(SELECT u.`USER_INFO_ID`,u.`NAME`,u.`CARD_NO`,u.`JOIN_DATE`,u.`SALARY`,u.`BIRTHDAY`,u.`GENDER`,u.`STATION`,u.`TELEPHONE`,u.`USER_LEVEL`,u.`REMARK`,u.`ORDER_NO`,m.`USER_INFO_ID` m_id,m.`NAME` m_name FROM
user_info_p u 
	LEFT JOIN
user_info_p m
	ON u.`MANAGER_ID`=m.`USER_INFO_ID`
 ) ui
	ON u.`USER_ID`=ui.user_info_id
) u
	LEFT JOIN
(SELECT dept_id d_id,dept_name d_name FROM dept_p) d
	ON u.dept_id = d.d_id
</sql>


	<resultMap type="User" id="userRM" autoMapping="true">
		<id column="user_id" property="userId" />
		<association property="dept" javaType="Dept">
			<id column="d_id" property="deptId"/>
			<result column="d_name" property="deptName" />
		</association>
		<association property="userInfo" javaType="UserInfo">
			<id column="user_info_id" property="userInfoId"/>
			<result column="name" property="name"/>
			<result column="card_no" property="cardNo"/>
			<result column="join_date" property="joinDate"/>
			<result column="salary" property="salary"/>
			<result column="birthday" property="birthday"/>
			<result column="gender" property="gender"/>
			<result column="station" property="station"/>
			<result column="telephone" property="telephone"/>
			<result column="remark" property="remark"/>
			<result column="user_level" property="userLevel"/>
			<result column="order_no" property="orderNo"/>
 			<association property="manager" javaType="UserInfo">
 				<id column="m_id" property="userInfoId"/>
 				<result column="m_name" property="name"/>
 			</association>
		</association>
	</resultMap>
	
  <select id="findAll" resultMap="userRM">
  	<include refid="usersql"/>
  </select>
	
<update id="changeState">
	UPDATE user_p SET state=#{state} WHERE user_id in 
	<!-- 因为传递过来的是map 所以collection中写key -->
	<foreach collection="ids" item="id" open="(" close=")" separator=",">
		#{id}
	</foreach>
</update>


<!-- 批量删除 -->
<delete id="delete">
	DELETE FROM user_p WHERE user_id IN 
	<!-- 因为传递过来的是一个参数 直接参数的类型（list,array） -->
	<foreach collection="array" item="id" open="(" close=")" separator=",">
		#{id}
	</foreach>
</delete>
	
	<!-- 插入数据 -->
	<insert id="saveUser">
	INSERT INTO user_p (user_id,dept_id,username,PASSWORD,state,create_time) 
	VALUES
(#{userId},#{dept.deptId},#{username},#{password},#{state},#{createTime})
	
	</insert>
	
	<select id="findOne" resultMap="userRM">
		<include refid="usersql"/> WHERE u.user_id=#{userId}
	</select>
	
	<update id="update">
	update user_p set dept_id=#{dept.deptId},username=#{username},PASSWORD=#{password},state=#{state},create_time=#{createTime} where user_id=#{userId}
	</update>
	
	
	<insert id="saveUserAndRole">
		INSERT INTO role_user_p (role_id,user_id) VALUES
		<foreach collection="roleIds" item="roleId" separator=",">
			(#{roleId},#{userId})
		</foreach>
	</insert>
	
	<update id="deleteDepts">
		update user_p set dept_id="" where dept_id in
		<foreach collection="array" item="deptId" open="(" close=")" separator=",">
		 	#{deptId}
		</foreach>
	</update>
	
	<select id="login" resultMap="userRM">
	<include refid="usersql"/> where username=#{username} and password=#{password}
	</select>
	
	<select id="findOneByUsername" resultMap="userRM">
		<include refid="usersql"/> where username=#{username} 
	</select>
	<select id="findModuleNamesBy" resultType="String">
		SELECT NAME FROM module_p WHERE module_id IN (SELECT module_id FROM role_module_p WHERE role_id IN (SELECT role_id FROM role_user_p WHERE user_id=#{userId})
)
	</select>
</mapper>